<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[导师制]]></title>
    <url>%2F2019%2F03%2F29%2F%E5%AF%BC%E5%B8%88%E5%88%B6%2F</url>
    <content type="text"><![CDATA[目的传道授业解惑 帮助新员工熟悉环境、业务以及进行例行化工作指导 在各个阶段观察和帮助新员工，避免工作不饱和，不明确工作目标。 传递公司的价值观和规章制度，绩效考核制度等等关键信息 帮助新员工融入新的集体，快速融入公司的节奏。 及时发现新员工是否满足工作要求，做出及时的调整 导师的选拔条件 在公司工作一年以上，绩效必须好 部门业务骨干，有能力进行业务指导 充分认可公司文化，有能力进行思想引导 为人正直热情，责任心强，有较强的计划、组织、管理、沟通能力，有能力为新员工制定合理的计划、安排相应的工作任务 一名导师名下不能超过两个学生 导师奖惩 以补助的形式给导师每月XXX元的“导师费” 定期评选“优秀导师”，被评为“优秀导师”的可得到公司XXX元的奖励 连带责任，如果徒弟犯了错误导师连带追责，甚至降职 没有担任过导师的员工，不得提拔为行政干部；不能继续担任导师的，不能再晋升 导师的管理主体 部门Leader、总监 人力资源部 主要内容 业务知识培训 开发规范和流程培训 需要使用到的相关技术培训 公司相关制度 可能的周期和计划 第一月：熟悉环境，制定计划，开发规范和业务培训 第一天：帮助熟悉工作环境 第一周：制定培养计划，布置工作和学习任务 第二周：主动询问，有问必答 第一月末：沟通，总结，做计划 第二月：安排工作，监督学习成果和工作绩效，及时就计划是否需要修改作出沟通 第三月：安排工作，监督学习成果和工作绩效，及时就计划是否需要修改作出沟通 … 帮助转正答辩]]></content>
      <categories>
        <category>管理</category>
      </categories>
      <tags>
        <tag>管理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CentOS 7下Cloudera Manager及CDH 6.1.0安装过程详解]]></title>
    <url>%2F2019%2F03%2F25%2FCM-CDH6.1.0%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B%E8%AF%A6%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[一、概念介绍1、CDH 概览CDH是Apache Hadoop和相关项目的最完整、最受测试和最流行的发行版。CDH提供Hadoop的核心元素-可伸缩存储和分布式计算-以及基于web的用户界面和重要的企业功能。CDH是Apache许可的开放源码，是唯一提供统一批处理、交互式SQL和交互式搜索以及基于角色的访问控制的Hadoop解决方案。 CDH 提供以下特性： 灵活性：存储任何类型的数据并使用各种不同的计算框架进行操作，包括批处理、交互式SQL、免费文本搜索、机器学习和统计计算。 集成：在一个完整的Hadoop平台上快速启动和运行，该平台与广泛的硬件和软件解决方案一起工作。 安全：处理和控制敏感数据。 可伸缩性：启用广泛的应用程序和规模，并扩展它们以满足您的需求。 高可用性：满怀信心地执行任务关键的业务任务。 兼容性：利用您现有的IT基础设施和投资。 CDH 组件如下图： 2、Cloudera Manager 概览Cloudera Manager 是用于管理cdh集群的端到端应用程序。Cloudera Manager通过向CDH集群的每个部分提供细粒度的可见性并对其进行控制来设置企业部署标准-授权运营商提高性能、提高服务质量、提高遵从性和降低管理成本。使用Cloudera Manager，您可以轻松地部署和集中操作完整的CDH堆栈和其他托管服务。应用程序自动化安装过程，将部署时间从数周减少到分钟；为您提供在集群范围内运行主机和服务的实时视图；提供一个单一的中央控制台来执行整个集群的配置更改；并集成各种报告和诊断工具，以帮助您进行操作。 Cloudera Manager 的架构如上图所示（cs结构），主要由如下几部分组成： 服务端/Server：Cloudera Manager 的核心。主要用于管理 web server 和应用逻辑。它用于安装软件，配置，开始和停止服务，以及管理服务运行的集群。 代理/agent：安装在每台主机上。它负责启动和停止的进程，部署配置，触发安装和监控主机。 数据库/Database：存储配置和监控信息。通常可以在一个或多个数据库服务器上运行的多个逻辑数据库。例如，所述的 Cloudera 管理器服务和监视，后台程序使用不同的逻辑数据库。 Cloudera Repository：由cloudera manager 提供的软件分发库。 客户端/Clients：提供了一个与 Server 交互的接口。 Cloudera Manager包括server端和agent；server端主要作用是监控集群分发配置集群等，agent端主管集群各节点。CDH是CM的安装包，本地或者云端，其中包括hadoop的生态系统需要的所有组件，通过Cloudera Manager统一管理和安装。CDH除了可以通过cm安装也可以通过yum,tar,rpm安装。 二、环境准备1、软件版本选择 类目 版本 下载地址 操作系统 CentOS Linux release 7.5.1804 (Core) 阿里云或者其他 数据库 MySQL 5.7.25 官网下载 JDK jdk-8u202-linux-x64.rpm Oracle 官网下载 Cloudera Manager Cloudera Manager 6.1.0 官方地址 CDH CDH 6.1.0 使用parcels安装 2、节点准备（四个节点） 名称 IP CM管理软件 namenode1 192.168.0.23 Cloudera Manager Server&amp;Agent ，MySQL datanode1 192.168.0.70 Cloudera Manager Agent datanode2 192.168.0.74 Cloudera Manager Agent datanode3 192.168.0.155 Cloudera Manager Agent 3、配置主机名和hosts解析(所有节点)编辑/etc/hostname，在每个节点上修改主机名(主机名不能出现下划线):1namenode1 1datanode1 1datanode2 1datanode3 在对应的节点上使用命令使其立刻生效：1hostnamectl set-hostname namenode1 1hostnamectl set-hostname datanode1 1hostnamectl set-hostname datanode2 1hostnamectl set-hostname datanode3 编辑文件/etc/hosts，增加如下内容(所有节点)。 1234192.168.0.23 namenode1192.168.0.70 datanode1192.168.0.74 datanode2192.168.0.155 datanode3 编辑 /etc/sysconfig/network(所有节点): 12NETWORKING=yesHOSTNAME=xxxnodexx 使用命令使其立刻生效1source /etc/sysconfig/network 4、关闭防火墙(所有节点)12systemctl stop firewalld.servicesystemctl disable firewalld.service 1firewall-cmd --state 5、关闭SELinux(所有节点)12sed -i 's\#SELINUX=enforcing\#SELINUX=disabled\#g' /etc/selinux/configsetenforce 0 1/usr/sbin/sestatus -v 6、添加定时任务(所有节点)1echo "$((RANDOM%60)) $((RANDOM%24)) \* \* \* /usr/sbin/ntpdate time1.aliyun.com" &gt;&gt; /var/spool/cron/root 7、禁用透明大页面压缩(所有节点)CDH配置需要 12echo never &gt; /sys/kernel/mm/transparent_hugepage/defragecho never &gt; /sys/kernel/mm/transparent_hugepage/enabled 并将上面的两条命令写入开机自启动/etc/rc.local。 8、优化交换分区(所有节点)12echo "vm.swappiness = 10" \&gt;\&gt; /etc/sysctl.confsysctl -p 9、配置 JDK (所有节点)卸载自带的OpenJdk：12rpm -qa | grep java #查询java相关的包rpm -e java*** --nodeps #根据查找到的软件包信息卸载 在Oracle官网下载JDK的RPM包1rpm -ivh jdk-8u202-linux-x64.rpm 10、安装数据库(namenode1)我们这里安装 MYSQL5.7.25，版本是支持的。 10.1 卸载自带mariadbcentos 7 默认安装的是mariadb，如果不卸载直接安装的话会报错。 12rpm -qa | grep mariadb #查看安装信息rpm -e mariadb-libs* --nodeps #根据查找到的软件包信息卸载 10.2 下载安装文件下载地址如下：1234https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-community-common-5.7.25-1.el7.x86_64.rpmhttps://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-community-libs-5.7.25-1.el7.x86_64.rpmhttps://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-community-client-5.7.25-1.el7.x86_64.rpmhttps://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-community-server-5.7.25-1.el7.x86_64.rpm 10.3 安装MySQL按以下顺序安装1234rpm -ivh mysql-community-common-5.7.21-1.el7.x86_64.rpmrpm -ivh mysql-community-libs-5.7.21-1.el7.x86_64.rpmrpm -ivh mysql-community-client-5.7.21-1.el7.x86_64.rpmrpm -ivh mysql-community-server-5.7.21-1.el7.x86_64.rpm 如果出现以下缺少libnuma错误，请先安装libnuma1yum install libnuma* 10.4 设置数据库(namenode1)启动服务1service mysqld start 查看初始密码1vim /var/log/mysqld.log 修改密码mysql -uroot -p #使用mysqld.log中的临时密码登录1ALTER USER 'root'@'localhost' IDENTIFIED BY 'Root123!!!'; 授权用户root使用密码passwd从任意主机连接到mysql服务器12GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'Root123!!!' WITH GRANT OPTION;flush privileges; 11、安装 MySQL JDBC 驱动(所有节点)用于各节点连接数据库。 123456wget https://dev.mysql.com/get/Downloads/Connector-J/mysql-connector-java-5.1.47.tar.gztar xf mysql-connector-java-5.1.46.tar.gzmkdir -p /usr/share/java/cd mysql-connector-java-5.1.47cp mysql-connector-java-5.1.47-bin.jar /usr/share/java/mysql-connector-java.jar 三、安装 CM 和 CDH1、配置 Cloudera Manager 仓库(namenode1)1.1. 下载rpm包CM主要下面的三个软件包： 12345cloudera-manager-agent-6.1.0-769885.el7.x86_64.rpmcloudera-manager-daemons-6.1.0-769885.el7.x86_64.rpmcloudera-manager-server-6.1.0-769885.el7.x86_64.rpmcloudera-manager-server-db-2-6.1.0-769885.el7.x86_64.rpmallkeys.asc 地址如下，下载完成放在cm6.1.0目录：12345https://archive.cloudera.com/cm6/6.1.0/redhat7/yum/RPMS/x86_64/cloudera-manager-agent-6.1.0-769885.el7.x86_64.rpmhttps://archive.cloudera.com/cm6/6.1.0/redhat7/yum/RPMS/x86_64/cloudera-manager-daemons-6.1.0-769885.el7.x86_64.rpmhttps://archive.cloudera.com/cm6/6.1.0/redhat7/yum/RPMS/x86_64/cloudera-manager-server-6.1.0-769885.el7.x86_64.rpmhttps://archive.cloudera.com/cm6/6.1.0/redhat7/yum/RPMS/x86_64/cloudera-manager-server-db-2-6.1.0-769885.el7.x86_64.rpmhttps://archive.cloudera.com/cm6/6.1.0/allkeys.asc CDH主要有如下几个文件：123CDH-6.1.0-1.cdh6.1.0.p0.770702-el7.parcelCDH-6.1.0-1.cdh6.1.0.p0.770702-el7.parcel.sha256manifest.json 地址如下，下载完成放在cdh6.1.0目录：123https://archive.cloudera.com/cdh6/6.1.0/parcels/CDH-6.1.0-1.cdh6.1.0.p0.770702-el7.parcelhttps://archive.cloudera.com/cdh6/6.1.0/parcels/CDH-6.1.0-1.cdh6.1.0.p0.770702-el7.parcel.sha256https://archive.cloudera.com/cdh6/6.1.0/parcels/manifest.json cloudera-manager-daemons 是 server 和 agent 必须安装的。 1.2 安装http服务12sudo yum -y install httpd sudo service httpd start 在浏览器输入服务器地址，检查是否启动成功。 1.3 制作本地repo在cm6.1.0 cdh6.1.0 同级目录输入如下命令：12createrepo cm6.1.0createrepo cdh6.1.0 将cm6.1.0 与cdh6.1.0移到/var/www/html目录下：1mv cm6.1.0 cdh6.1.0 /var/www/html 在浏览器中查看目录:http://ip/cm6.1.0http://ip/cdh6.1.0 1.3 制作本地repo源sudo vi /etc/yum.repos.d/cm.repo12345[cmrepo]name = cm_repobaseurl =http://ip/cm6.1.0/enable = truegpgcheck = false sudo vi /etc/yum.repos.d/cm.repo12345[cdhrepo]name = cdh_repobaseurl =http://ip/cdh6.1.0/enable = truegpgcheck = false 1.4 把repo源文件传输到其他节点12scp /etc/yum.repos.d/cm.repo root@datanodeX:/etc/yum.repos.d/scp /etc/yum.repos.d/cdh.repo root@datanodeX:/etc/yum.repos.d/ 2、安装 CM Server 和 Agent(所有节点) namenode1： 1yum install cloudera-manager-daemons cloudera-manager-agent cloudera-manager-server datanode0[1-3]： 1yum install cloudera-manager-daemons cloudera-manager-agent 3、为 Cloudera 各软件创建数据库(namenode1)使用root登陆数据库，创建以下数据库和账号。 123456789101112131415161718CREATE DATABASE scm DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;GRANT ALL ON scm.* TO 'scm'@'%' IDENTIFIED BY 'YZHdata2019!!!';CREATE DATABASE amon DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;GRANT ALL ON amon.* TO 'amon'@'%' IDENTIFIED BY 'YZHdata2019!!!';CREATE DATABASE rman DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;GRANT ALL ON rman.* TO 'rman'@'%' IDENTIFIED BY 'YZHdata2019!!!';CREATE DATABASE hue DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;GRANT ALL ON hue.* TO 'hue'@'%' IDENTIFIED BY 'YZHdata2019!!!';CREATE DATABASE metastore DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;GRANT ALL ON metastore.* TO 'hive'@'%' IDENTIFIED BY 'YZHdata2019!!!';CREATE DATABASE sentry DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;GRANT ALL ON sentry.* TO 'sentry'@'%' IDENTIFIED BY 'YZHdata2019!!!';CREATE DATABASE nav DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;GRANT ALL ON nav.* TO 'nav'@'%' IDENTIFIED BY 'YZHdata2019!!!';CREATE DATABASE navms DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;GRANT ALL ON navms.* TO 'navms'@'%' IDENTIFIED BY 'YZHdata2019!!!';CREATE DATABASE oozie DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;GRANT ALL ON oozie.* TO 'oozie'@'%' IDENTIFIED BY 'YZHdata2019!!!'; 4、设置 Cloudera Manager 数据库(namenode1)123456789[root@namenode1 ~]# /opt/cloudera/cm/schema/scm_prepare_database.sh mysql scm scmEnter SCM password: YZHdata2019!!!JAVA_HOME=/usr/java/jdk1.8.0_162Verifying that we can write to /etc/cloudera-scm-serverCreating SCM configuration file in /etc/cloudera-scm-serverExecuting: /usr/java/jdk1.8.0_162/bin/java -cp /usr/share/java/mysql-connector-java.jar:/usr/share/java/oracle-connector-java.jar:/usr/share/java/postgresql-connector-java.jar:/opt/cloudera/cm/schema/../lib/* com.cloudera.enterprise.dbutil.DbCommandExecutor /etc/cloudera-scm-server/db.properties com.cloudera.cmf.db.[ main] DbCommandExecutor INFO Successfully connected to database.All done, your SCM database is configured correctly! 5、安装 CDH5.1 配置CDH的软件包 parcels(namenode1)把下载的CDH相关文件copy到/opt/cloudera/parcel-repo/目录123cp /var/www/html/cm6.1.0/CDH-6.1.0-1.cdh6.1.0.p0.770702-el7.parcel /opt/cloudera/parcel-repo/cp /var/www/html/cm6.1.0/CDH-6.1.0-1.cdh6.1.0.p0.770702-el7.parcel.sha256 /opt/cloudera/parcel-repo/cp /var/www/html/cm6.1.0/manifest.json /opt/cloudera/parcel-repo/ 修改属主属组1chown cloudera-scm.cloudera-scm /opt/cloudera/parcel-repo/* 5.2 启动 Cloudera Manager Server1systemctl start cloudera-scm-server 如果启动中有什么问题，可以查看日志。 1tail -f /var/log/cloudera-scm-server/cloudera-scm-server.log 在最后显示的日志中，有显示启动监听的端口。 12Started ServerConnector@da518cb&#123;SSL,[ssl, http/1.1]&#125;&#123;0.0.0.0:7183&#125;Started ServerConnector@a77165b&#123;HTTP/1.1,[http/1.1]&#125;&#123;0.0.0.0:7180&#125; 四、初始化 Cloudera Manager浏览器打开http://192.168.0.23:7180，用户名和密码默认都是admin。 接收许可。 这里我们选择免费版，收费版请自行选择。 五、集群安装指定要添加的节点。 选择存储库，之前我们已经在 CM Server 节点配置好了。 不进行勾选，选择我们自己安装的 JDK。 提供 SSH 登录凭据。 安装 agents，因为之前我们已经安装了，所以这里速度会很快。 安装选定的Parcel，之前我们已经下载好，并配置好放在的 CM Server 节点的/opt/cloudera/parcel-repo。 检查主机正确性。 六、集群设置选择要安装的服务，可以根据自己的需求进行软件安装。 自定义角色分配。 数据库设置。 审核更改，如果有特定目录的设定或者参数的设定，可以在这里进行更正。 首次运行。 安装完成。 七、管理集群首页Dashboard。 HDFS。 HBase。]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>大数据</tag>
        <tag>CDH</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[快速排序算法]]></title>
    <url>%2F2018%2F10%2F22%2F%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%2F</url>
    <content type="text"><![CDATA[快速排序 快速排序使用分治法（Divide and conquer）策略来把一个序列（list）分为两个子序列（sub-lists）。 步骤为：从数列中挑出一个元素，称为“基准”（pivot），重新排序数列，所有比基准值小的元素摆放在基准前面，所有比基准值大的元素摆在基准后面（相同的数可以到任何一边）。在这个分区结束之后，该基准就处于数列的中间位置。这个称为分区（partition）操作。递归地（recursively）把小于基准值元素的子数列和大于基准值元素的子数列排序。递归到最底部时，数列的大小是零或一，也就是已经排序好了。这个算法一定会结束，因为在每次的迭代（iteration）中，它至少会把一个元素摆到它最后的位置去。 在平均状况下，排序nn个项目要 O(nlog⁡n){\displaystyle \ O(n\log n)}（大O符号）次比较。在最坏状况下则需要O(n2){\displaystyle O(n^{2})}次比较，但这种状况并不常见。事实上，快速排序Θ(nlog⁡n){\displaystyle \Theta (n\log n)}通常明显比其他算法更快，因为它的内部循环（inner loop）可以在大部分的架构上很有效率地达成。]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>快速排序</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[RESTfule API规范]]></title>
    <url>%2F2018%2F10%2F22%2FRESTful-API%E8%A7%84%E8%8C%83%2F</url>
    <content type="text"><![CDATA[REST RESTful本身是一种风格而不是规范，本文为该风格的规范实现的最佳实践，本文档详细说明了HTTP RESTful API的定义和使用规范，作为接口调用者和实现者的重要参考。 接口风格遵循RESTful设计风格，同时控制复杂度及易于使用，仅遵循大部分原则。 遵循原则： 使用https协议 版本号放入URL或Header 只提供json返回格式 post,put上使用json作为输入 使用http状态码作为错误提示 Path（路径）尽量使用名词，不使用动词，把每个URL看成一个资源 使用HTTP动词（GET,POST,PUT,DELETE）作为action操作URL资源 过滤信息 limit：指定返回记录数量 offset：记录开始位置 direction：请求数据的方向，取值prev-上一页数据；next-下一页数据 page：第几页 per_page：每页条数 total_count：总记录数 total_pages：总页数，等于page时，表示当前是最后一页 sort：column1,column2排序字段 orderby：排序规则，desc或asc q：搜索关键字（uri encode之后的） 返回结果 GET：返回资源对象 POST：返回新生成的资源对象 PUT：返回完整的资源对象 DELETE：返回一个空文档 速率限制 X-RateLimit-Limit: 每个IP每个时间窗口最大请求数 X-RateLimit-Remaining: 当前时间窗口剩余请求数 X-RateLimit-Reset: 下次更新时间窗口的时间（UNIX时间戳），达到下个时间窗口时，Remaining恢复为Limit 未遵循原则： Hypermedia API（HATEOAS），通过接口URL获取接口地址及帮助文档地址信息 限制返回值的域，fields=id,subject,customer_name 缓存，使用ETag和Last-Modified 参考： GitHub api ruanyifeng blog best-practices-for-a-pragmatic-restful-api 模块和版本说明接口模块相互对立且有版本管理，模块名作为APP配置项进行存储，每个模块的版本号version和endpoint在应用初始化时调用api模块信息接口（通过传递客户端应用名称和版本号获取各个API模块的endpoint和version）获取并存储。 示例模块及最新版本号： 模块模块用途最新版本号account帐户v1sms短信v1open一些开放接口，不需要公共参数v1 公共参数Headers公共请求参数是指每个接口都可能需要传递的参数，公共参数通过header传递。 参数是否必须说明及header格式app所有接口必须请求客户端应用标识，取值*-ios、*-android、*-pc、*-h5header格式：X-Co-App: $appuser_idApp登录后所有接口都传，Web通过session机制获取用户标识header格式：Authorization: CoAPI base64(user_id:token)tokenApp登录后所有接口都传，Web通过session机制获取授权访问令牌header格式：Authorization: CoAPI base64(user_id:token) Web应用通过cookies传递session id，user_id和token无需传递，接口会从session自动获取； 同一token值在App和Web各应用间通用（token即为session id）； APP修改user-agent，在原有user-agent的尾部添加$app/$version和NetType/$value。如： Dalvik/2.1.0 (Linux; U; Android 6.0.1; MI 4LTE MIUI/V7.5.3.0.MXGCNDE) $app-android/3.0.0 NetType/4G Mozilla/5.0 (iPhone; CPU iPhone OS 10_3_2 like Mac OS X) AppleWebKit/603.2.4 (KHTML, like Gecko) $app-ios/3.0.0 NetType/WIFI app取值及释义示例 app取值客户端名称【域名】admin-pc管理中心PC网页版【admin.url.com】admin-h5管理中心手机网页版【admin.url.com】admin-ios管理中心iOS版admin-android管理中心Android版 Cookies 用于告知服务端是否支持Webp的Cookie：cookie name是supportWebp，取值是1（支持）和0（不支持），未传递时服务端默认取值为0。 Webview植入Session的Cookie： JWT &amp; OAuth2 Json Web Token可用于替代session-cookie机制。但会存在一些问题，比如为过期token强制失效问题（用户修改了密码后，无法强制其他的终端token全部失效）。 OAuth2是授权其他开发者访问自己应用有限权限的授权机制。 权限 权限分为 none：无需任何授权； token：需要用户登录授权，可通过header Authorization和Cookie CoSID传递； admintoken：需要管理员登录授权，可通过header Authorization和Cookie CoCPSID传递； token || admintoken：用户登录授权或管理员登录授权都可以； sign：需要签名，一般用于服务端内部相互调用。 状态码说明正确接口正常访问情况下，服务器返回2××的HTTP状态码。 HTTP状态码200 OK - 表示已在响应中发出、资源更改成功（GET、PUT）201 Created - 新资源被创建（POST）204 No Content - 资源被删除（DELETE） 错误当用户访问接口出错时，服务器会返回给一个合适的4××或者5××的HTTP状态码；以及一个application/json格式的消息体，消息体中包含错误码code和错误说明message。 5××错误(500=&lt;status code)为服务器或程序出错，客户端只需要提示“服务异常，请稍后重试”即可，该类错误不在每个接口中列出。 4××错误(400=&lt;status code&lt;500)为客户端的请求错误，需要根据具体的code做相应的提示和逻辑处理，message仅供开发时参考，不建议作为用户提示。 部分错误示例： codemessageHTTP状态码InvalidToken未登录或授权过期，请登录401 UnauthorizedValidationError输入字段验证出错，缺少字段或字段格式有误422 Unprocessable EntityAccountNotExist账户名不存在404 Not FoundInvalidPassword密码错误401 UnauthorizedNotFound请求的资源不存在404 Not FoundAccountHasExist账户名已经存在409 ConflictMobileHasBinded手机号已经绑定其他账户409 ConflictInvalidSign参数签名验证未通过403 ForbiddenInvalidSMSCode短信验证码错误403 ForbiddenExpiredSMSCode过期的短信验证码403 ForbiddenFrequencyLimit发送过于频繁，请稍后再试403 ForbiddenTimesExceeded达到最大发送次数限制，请明天再试403 ForbiddenVerifyTimesExceeded达到最大校验次数，请明天再试403 ForbiddenRateLimitExceeded接口调用次数超过限制，请稍后再试429 Too Many Requests InternalError服务异常，请稍后再试500 Internal Server Error HTTP状态码参考 参数传递遵循RESTful规范，使用了GET, POST, PUT, DELETE共4种请求方法。 GET：请求资源，返回资源对象 POST：新建资源，返回新生成的资源对象 PUT：新建/更新资源，返回完整的资源对象 DELETE：删除资源，返回body为空 GET请求不允许有body， 所有参数通过拼接在URL之后传递，所有的请求参数都要进行遵循RFC 3986的URL Encode。 DELETE删除单个资源时，资源标识通过path传递，批量删除时，通过在body中传递JSON。 POST, PUT请求，所有参数通过JSON传递，可选的请求参数，只传有值的，无值的不要传递，contentType为application/json。 4种请求动作中，GET、PUT、DELETE是幂等的；只有POST是非幂等的。幂等操作的特点是其任意多次执行所产生的影响均与一次执行的影响相同。 是非幂等是判断接口使用POST还是PUT的决定条件 注意： APP端获取json数据时，对于数值类型字段必须以数值类型转换，无论传递过来的值是否带引号。 速率限制Rate Limiting 为了防止API被恶意调用，对API调用进行速率限制。 速率限制为每IP每15分钟5000次（dev/qa为10W）调用（15分钟是一个时间窗口）。 限制是针对所有接口模块一起计算的（Redis key为APIRL:{IP}），暂时没有特殊的模块或单个接口（未来可能有）。 你可以通过每个接口返回的HTTP headers了解当前速率限制的情况: X-RateLimit-Limit: 每个IP每个时间窗口最大请求数 X-RateLimit-Remaining: 当前时间窗口剩余请求数 X-RateLimit-Reset: 下次更新时间窗口的时间（UNIX时间戳），达到下个时间窗口时，Remaining恢复为Limit 超出速率限制，返回以下错误 安全注意事项 用户登录后用户的token；aliyun OSS的bucket、AccessKey ID与AccessKey secret；微视频的appid、sign、bucket；这些关键数据通过调用接口获得，需要在客户端以安全的方式存储。 音频视频在APP内的存储，不允许被拷贝（即使越狱或root后拿走也无法使用）。 测试工具推荐Chrome浏览器插件Postman作为接口测试工具， Postman下载地址 文档生成工具 生成的工具为apidoc，详细阅读官方文档：http://apidocjs.com 调用示例 伪代码 PHP API模块信息获取 App配置文件中仅存储api模块名，App初始化时请求获取api模块信息，获取各个api模块的信息（endpoint和version）。]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>REST</tag>
      </tags>
  </entry>
</search>
